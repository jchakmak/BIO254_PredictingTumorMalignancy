df = read.csv("proj1data.csv")
View(df)
View(df)
plot(df[11])
summary(df[11])
table(df[11])
table(df[7])
table(df[11])
View(df)
table(df[7])
table(df[11])
View(df)
df$Bare_nuclei
grep("\\?", df$Bare_nuclei)
table(df[7])
table(df[11])
df <- df[-grep("\\?", df$Bare_nuclei),]
df = read.csv("proj1data.csv")
table(df[7])
df <- df[-grep("\\?", df$Bare_nuclei),]
table(df[7])
# Class column
table(df[11])
View(df)
library(corrplot)
install.packages("corrplot")
library(corrplot)
View(df)
training <- createDataPartition(df$Class, p=.6, list=FALSE, times=1)
library(caret)
set.seed(1234)
install.packages("caret")
library(caret)
install.packages("caret")
library(caret)
update.packages(checkBuilt = TRUE)
library(caret)
?createDataPartition
?caret
install.packages("caret", dependencies = TRUE)
library(caret)
install.packages("pbkrtest")
install.packages("pbkrtest")
install.packages("caret", dependencies = TRUE)
library(caret)
install.packages("caret", dependencies = TRUE)
library(caret)
install.packages("quantreg")
library(caret)
set.seed(1234)
training <- createDataPartition(df$Class, p=.6, list=FALSE, times=1)
trainingSet <- df[training,]
otherSet <- df[-training,]
set.seed(2345)
validation <- createDataPartition(otherSet$Class, p=.5, list=FALSE, times=1)
validationSet <- otherSet[validation,]
testingSet <- otherSet[-validation,]
library(corrplot)
trainingMatrix <- data.frame(trainingSet[,1:561])
trainingMatrix <- data.frame(trainingSet[,1:410])
trainingMatrix <- data.frame(trainingSet[,1:10])
trainingMatrix
pairs(trainingMatrix)
cor(trainingMatrix)
View(trainingMatrix)
trainingMatrix <- data.frame(trainingSet[,2:10])
cor(trainingMatrix)
trainingMatrix
View(trainingMatrix)
View(df)
trainingMatrix <- data.frame(trainingSet[,1:10])
View(trainingMatrix)
trainingMatrix <- data.frame(trainingSet[,2:10])
matrix <- as.data.frame(as.table(cor(trainingMatrix)))
df[is.na(df)] <- 0
cor(df, use="pairwise.complete.obs")
matrix <- as.data.frame(as.table(cor(trainingMatrix)))
for(i in trainingSet[,2:10]) {
print(i)
}
?class
for(i in trainingSet[,2:10]) {
print(class(i))
}
for(i in trainingSet[,2:10]) {
if(class(i) != "integer") {
print(i)
}
}
for(i in trainingSet[,2:10]) {
i = as.numeric(i)
}
matrix <- as.data.frame(as.table(cor(trainingMatrix)))
trainingSet <- as.numeric(trainingSet)
as.integer(trainingSet)
for(i in trainingSet) {
print(i)
}
for(i in trainingSet[,2:10]) {
print(i)
}
for(i in trainingSet[,2:10]) {
i = as.numeric(i)
}
trainingMatrix <- data.frame(trainingSet[,2:10])
for(i in trainingMatrix) {
i = as.numeric(i)
}
matrix <- as.data.frame(as.table(cor(trainingMatrix)))
for(i in trainingMatrix) {
i = as.numeric(i)
print(class(i))
}
for( i in trainingMatrix) {
print(class(i))
}
for(i in trainingMatrix) {
i = as.integer(i)
print(class(i))
}
trainingMatrix <- sapply(trainingMatrix, as.numeric)
matrix <- as.data.frame(as.table(cor(trainingMatrix)))
matrix
cor(trainingMatrix)
matrix <- as.data.frame(as.table(cor(trainingMatrix)))
matrix
?cor
?pairs
pairs(matrix)
?pairs
pairs(cor(trainingMatri))
pairs(cor(trainingMatrix))
table(cor(trainingMatrix))
table(matrix)
matrix
cor(trainingMatrix)
cor(trainingMatrix)
# Load in the data
df = read.csv("proj1data.csv")
# Bare_nuclei column (16 records with "?")
table(df[7])
# Class column
table(df[11])
# Remove records with question marks
df <- df[-grep("\\?", df$Bare_nuclei),]
### Split data into training, validation, and test sets
library(caret)
set.seed(1234)
training <- createDataPartition(df$Class, p=.6, list=FALSE, times=1)
trainingSet <- df[training,]
otherSet <- df[-training,]
set.seed(2345)
validation <- createDataPartition(otherSet$Class, p=.5, list=FALSE, times=1)
validationSet <- otherSet[validation,]
testingSet <- otherSet[-validation,]
rm(list=ls())
# Load in the data
df = read.csv("proj1data.csv")
# Bare_nuclei column (16 records with "?")
table(df[7])
# Class column
table(df[11])
# Remove records with question marks
df <- df[-grep("\\?", df$Bare_nuclei),]
### Split data into training, validation, and test sets
library(caret)
set.seed(1234)
training <- createDataPartition(df$Class, p=.8, list=FALSE, times=1)
trainingSet <- df[training,]
testingSet <- df[-training,]
rm(list=ls())
# Load in the data
df = read.csv("proj1data.csv")
# Bare_nuclei column (16 records with "?")
table(df[7])
# Class column
table(df[11])
# Remove records with question marks
df <- df[-grep("\\?", df$Bare_nuclei),]
### Split data into training, validation, and test sets
library(caret)
set.seed(1234)
partition <- createDataPartition(df$Class, p=.8, list=FALSE, times=1)
trainingSet <- df[training,]
testingSet <- df[-training,]
rm(list=ls())
# Load in the data
df = read.csv("proj1data.csv")
# Bare_nuclei column (16 records with "?")
table(df[7])
# Class column
table(df[11])
# Remove records with question marks
df <- df[-grep("\\?", df$Bare_nuclei),]
### Split data into training, validation, and test sets
library(caret)
set.seed(1234)
partition <- createDataPartition(df$Class, p=.8, list=FALSE, times=1)
trainingSet <- df[partition,]
testingSet <- df[-partition,]
View(df)
df = read.csv("proj1data.csv")
# Load in the data
df = read.csv("proj1data.csv")
# Bare_nuclei column (16 records with "?")
table(df[7])
# Class column
table(df[11])
# Remove records with question marks
df <- df[-grep("\\?", df$Bare_nuclei),]
### Split data into training, validation, and test sets
library(caret)
set.seed(1234)
partition <- createDataPartition(df$Class, p=.8, list=FALSE, times=1)
trainingSet <- df[partition,]
testingSet <- df[-partition,]
# Correlation matrix
library(corrplot)
# list of attributes
trainingMatrix <- data.frame(trainingSet[,2:10])
# convert training matrix to numeric variables
trainingMatrix <- sapply(trainingMatrix, as.numeric)
# plot training matrix
pairs(trainingMatrix)
# correlation of training matrix
cor(trainingMatrix)
# data frame from training matrix correlations
matrix <- as.data.frame(as.table(cor(trainingMatrix)))
trainingSet
matrix <- cor(trainingSet[,2:10])
set.seed(23)
control <- rfeControl(functions=rfFuncs, method='cv', number=10)
results <- rfe(trainingSet[,2:10], temp2[,11], sizes=c(1:10), rfeControl=control)
results <- rfe(trainingSet[,2:10], trainingSet[,11],
sizes=c(1:10), rfeControl=control)
results
set.seed(45)
rf_model <- train(Class~Uni_size + Bare_nuclei + Uni_shape + Thickness + Bland_chrom,
data=trainingSet, method="rf", trControl=trainControl(method="cv", number=10),
prox=TRUE, allowParallel=TRUE)
plot(rf_model)
testingSet$Class
testingPrediction <- predict(rf_model, testingSet)
testingSet$rightPred <- testingPrediction == testingSet$Class
t<-table(testingPrediction, testingSet$Class)
t
testingSet
library(randomForest)
trainingSet
set.seed(123)
fit <- randomForest(as.factor(Class) ~ Thickness + Uni_size + Uni_shape + Marg_adhesion
+ SECS + Bare_nuclei + Bland_chrom + Normal_nuclei + Mitoses,
data=trainingSet, importance=TRUE, ntree=2000)
fit
varImpPlot(fit)
pred <- predict(fit, test)
# test with testing data
pred <- predict(fit, testingSet)
pred
table(pred, testingSet$Class)
fit
fit$ntree
fit$confusion
fit$err.rate
summary(df)
colnames(df)
type(df$ID)
class(df$ID)
?randomForest
library(randomForest)
?randomForest
# variable importance
varImpPlot(fit)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
# Load in the data
df = read.csv("proj1data.csv")
# Column names
colnames(df)
# Class column
table(df[11])
# Bare_nuclei column (16 records with "?")
table(df[7])
# Remove records with question marks
df <- df[-grep("\\?", df$Bare_nuclei),]
### Split data into training, validation, and test sets
library(caret)
set.seed(1234)
partition <- createDataPartition(df$Class, p=.8, list=FALSE, times=1)
trainingSet <- df[partition,]
testingSet <- df[-partition,]
library(randomForest)
set.seed(123)
# random forest
# importance -> importance of predictors is able to be accessed
# ntrees -> 2000 trees are produced in the forest
fit <- randomForest(as.factor(Class) ~ Thickness + Uni_size + Uni_shape + Marg_adhesion + SECS + Bare_nuclei + Bland_chrom + Normal_nuclei + Mitoses, data=trainingSet, importance=TRUE, ntree=2000)
# display confusion matrix of fit on training data
fit$confusion
# variable importance
varImpPlot(fit)
# Load in the data
df = read.csv("proj1data.csv")
# Bare_nuclei column (16 records with "?")
table(df[7])
# Class column
table(df[11])
# Remove records with question marks
df <- df[-grep("\\?", df$Bare_nuclei),]
### Split data into training, validation, and test sets
library(caret)
set.seed(1234)
partition <- createDataPartition(df$Class, p=.8, list=FALSE, times=1)
trainingSet <- df[partition,]
testingSet <- df[-partition,]
#---------------------------------------------------------------
# source:
# http://trevorstephens.com/kaggle-titanic-tutorial/r-part-5-random-forests/
library(randomForest)
set.seed(123)
# random forest
fit <- randomForest(as.factor(Class) ~ Thickness + Uni_size + Uni_shape + Marg_adhesion
+ SECS + Bare_nuclei + Bland_chrom + Normal_nuclei + Mitoses,
data=trainingSet, importance=TRUE, ntree=2000)
# variable importance
varImpPlot(fit)
# test with testing data
pred <- predict(fit, testingSet)
table(pred, testingSet$Class)
# Load in the data
df = read.csv("proj1data.csv")
# Bare_nuclei column (16 records with "?")
table(df[7])
# Class column
table(df[11])
# Remove records with question marks
df <- df[-grep("\\?", df$Bare_nuclei),]
### Split data into training, validation, and test sets
library(caret)
set.seed(1234)
partition <- createDataPartition(df$Class, p=.8, list=FALSE, times=1)
trainingSet <- df[partition,]
testingSet <- df[-partition,]
#---------------------------------------------------------------
# source:
# http://trevorstephens.com/kaggle-titanic-tutorial/r-part-5-random-forests/
library(randomForest)
set.seed(123)
# random forest
fit <- randomForest(as.factor(Class) ~ Thickness + Uni_size + Uni_shape + Marg_adhesion
+ SECS + Bare_nuclei + Bland_chrom + Normal_nuclei + Mitoses,
data=trainingSet, importance=TRUE, ntree=2000)
# variable importance
varImpPlot(fit)
# test with testing data
pred <- predict(fit, testingSet)
table(pred, testingSet$Class)
fit$confusion
df = read.csv("proj1data.csv")
# Bare_nuclei column (16 records with "?")
table(df[7])
# Class column
table(df[11])
# Remove records with question marks
df <- df[-grep("\\?", df$Bare_nuclei),]
